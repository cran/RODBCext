
Changes in RODBCext 0.3.0 (2017-04-09)

  * R dates ("Date", "POSIXlt" and "POSIXct" classes) are now handled 
    automatically. It is no longer needed to manually cast them to character
    vectors.
  * It is now possible to set query execution timeout.
    * sqlPrepare() and sqlExecute() function support additional query_timeout
      paramete
    * odbcSetQueryTimeout() and odbcGetQueryTimeout() functions were added
  * Support for reading long character columns improved.
    * If the driver does not report column length, 65535 characters are read.
    * If the driver reports extremaly large column length (more then 16M),
      16M characters are read.

Changes in RODBCext 0.2.7 (2016-09-17)

  * Added support for column types reporting 0 as its length (most notably
    Ms SQL Server's "varchar(max)" column type).
    * When passing data from R into a database, data of any size are 
      supported (the available memory for ODBC buffers is the only limit).
    * When reading data from database into R a default RODBC's buffer length
      of 255 characters is used to assure compatibility with RODBC (RODBCext 
      relies on RODBC functions on data retrieval).
      This means strings of type "varchar(max)" will be truncated to 255
      charactes.

Changes in RODBCext 0.2.6 (2016-07-11)

  * Number of parameters passed to sqlExecute() is now strictly checked against
    number of parameters specified in the query. It avoids segfaults when
    provided data have to many columns
    (https://github.com/zozlak/RODBCext/issues/3)

Changes in RODBCext 0.2.5 (2015-06-30)

  * force_loop=FALSE parameter added to sqlExecute() as a workaround for 
    queries wchich have to be planned again before each ODBC'a sqlExecute()
    call (e.g. "EXEC"" queries on MS SQL Server). 
    Setting force_loop=TRUE allows to use a vectorized form of the sqlExecute()
    despite this limitation by forcing sqlExecute() to plan a query again
    for each row of data. 

Changes in RODBCext 0.2.4 (2014-07-31)

  * SQL_RESULT_CHECK macro doesn't rise errors on SQL_NO_DATA state anymore.
    This prevents rising errors on queries which return SQL_NO_DATA state on
    execution (e.g. UPDATE queries which update no records)

Changes in RODBCext 0.2.3 (2014-07-29)

  * A Vignette about paremeterized SQL queries added.

Changes in RODBCext 0.2.2 (2014-07-07)

  * Some minor changes in RODBCext.c to avoid compilation errors on Solaris

Changes in RODBCext 0.2.1 (2014-07-04)

  * Some minor changes to eliminate notices raised on a package check:
    * too long line in sqlExecute() examples splitted
    * @import annotations added 

Changes in RODBCext 0.2 (2014-07-01)

  * Changes in API - ability to prepare and execute query in one call moved 
    from sqlPrepare() to sqlExecute():
    * sqlPrepare() now takes only channel, query and errors arguments
    * sqlExecute() now takes additional query=NA argument

  * Added support for drivers which don't provide SQLDescribeParam() ODBC call
    (by applying data types from data passed to sqlExecute())

  * sqlExecute() now merges results of all queries if nrows(data) > 1 and 
    fetch=TRUE

  * Added functions sqlFetchMore() and odbcFetchRows() which avoid calls to 
    RODBC::sqlFetchMore() and RODBC::odbcFetchRows() when connection handle is 
    in a "query prepared but not executed" state (which caused R to crash)

  * Switch from RODBC::sqlFetchMore() to RODBC::sqlGetResults() for fetching 
    results (now we don't care about queries which do not produce any results
    like UPDATE, DELETE, CREATE, etc. queries)

Changes in RODBCext 0.1 (2014-05-28)

  * First version of the package.